<h3>Component</h3>

@code {

}
@page "/recipe-generator"
@using RecipeGeneratorApp.Models
@using RecipeGeneratorApp.Services
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager

<h1>Recipe Generator</h1>

<div class="input-section">
    <h2>Filter Recipes</h2>
    <div class="form-group">
        <label>Ingredients:</label>
        <input type="text" class="form-control" @bind="SearchIngredients" />
    </div>
    <div class="form-group">
        <label>Cuisine:</label>
        <select class="form-control" @bind="SelectedCuisine">
            <option value="">Any</option>
            <option value="Italian">Italian</option>
            <option value="Mexican">Mexican</option>
        </select>
    </div>
    <button class="btn btn-primary" @onclick="GenerateRecipes">Generate Recipes</button>
</div>

@if (GeneratedRecipes != null && GeneratedRecipes.Any())
{
    <h2>Generated Recipes</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Cuisine</th>
                <th>Main Ingredients</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in GeneratedRecipes)
            {
                <tr>
                    <td>@recipe.Name</td>
                    <td>@recipe.Cuisine</td>
                    <td>@string.Join(", ", recipe.Ingredients.Take(3))...</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(recipe.Id)">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (GeneratedRecipes != null && !GeneratedRecipes.Any())
{
    <p>No recipes found matching your criteria.</p>
}

@code {
    private string SearchIngredients { get; set; } = string.Empty;
    private string SelectedCuisine { get; set; } = string.Empty;
    private List<Recipe> GeneratedRecipes { get; set; } = new List<Recipe>();
    private bool isLoading = false;

    public RecipeGenerator(bool isLoading)
    {
        this.isLoading = isLoading;
    }

    private async Task GenerateRecipes()
    {
        isLoading = true;
        GeneratedRecipes = null; // Clear previous results
        StateHasChanged(); // Immediately re-render to show loading message

        GeneratedRecipes = await RecipeService.GetRecipesAsync(SearchIngredients, SelectedCuisine);
        isLoading = false;
        StateHasChanged();
    }

    public override bool Equals(object obj)
    {
        return obj is RecipeGenerator generator &&
               isLoading == generator.isLoading;
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(isLoading);
    }

    private void ShowDetails(int recipeId)
    {
        NavigationManager.NavigateTo($"/recipe-details/{recipeId}");
    }
}